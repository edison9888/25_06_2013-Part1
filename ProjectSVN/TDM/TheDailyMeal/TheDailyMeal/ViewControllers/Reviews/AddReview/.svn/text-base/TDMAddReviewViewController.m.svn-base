//
//  TDMAddReviewViewController.m
//  TheDailyMeal
//
//  Created by Bittu Davis on 1/13/12.
//  Copyright (c) 2012 Rapid Value Solutions. All rights reserved.
//

#import "TDMAddReviewViewController.h"
#import "TDMSuccessPageViewController.h"
#import "TDMPlaceHolderTextView.h"
#import "TDMReviewConfirmationViewController.h"

@interface TDMAddReviewViewController()

//private
- (void)customiseCurrentView;
- (void)addViewsToScrollView;
- (void)addReviewTitleTextView;
- (void)addReviewDecriptionTextView;
- (void)startNotifications;
- (void)addThumbImage:(NSString *)imageName imageRect:(CGRect)rect;
- (void)addReviewDescriptionImage;

- (void)adjustScrollView;
- (void)RestoreScrollview;
- (void)startAnimateScrollview:(int)iVal;

@end

@implementation TDMAddReviewViewController
@synthesize backgroungImageView;
@synthesize titleViewImage;
@synthesize viewTitleImageTitle;
@synthesize scrollView;
@synthesize submitButton;
@synthesize reviewDescriptionLabel;
@synthesize adButton;
@synthesize reviewTitleTextView;
@synthesize reviewDescriptionTextView;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
        //this will create the navigation Title as My Profile
        [self createCustomisedNavigationTitleWithString:kNAVBAR_TITLE_REVIEWS];
        
        //this will create the back button on the navigation bar
        [self createNavigationBarButtonOfType:kBACK_BAR_BUTTON_TYPE];
    }
    return self;
}

- (void)didReceiveMemoryWarning
{
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc that aren't in use.
}

#pragma mark - View lifecycle

- (void)viewDidLoad
{
    
    [super viewDidLoad];
    [self customiseCurrentView];
    [self addViewsToScrollView];
    [self startNotifications];
    [self.navigationItem setRBIconImage];
}

#pragma mark - add Views
- (void)addViewsToScrollView
{
    //add review images
    CGRect rect = CGRectMake(15, 10, 62, 62);
    [self addThumbImage:@"dish1.jpg" imageRect:rect];

//    //add review description image
//    CGRect rect = CGRectMake(15, 10, 62, 62);
//    [self addThumbImage:@"dish1.jpg" imageRect:rect];
    
    [self addReviewDescriptionImage];
    
    [self addReviewTitleTextView];
    [self addReviewDecriptionTextView];
    
    self.reviewDescriptionLabel.frame = CGRectMake(90, 98, 210, 15);
    self.reviewDescriptionLabel.font = kGET_BOLD_FONT_WITH_SIZE(12);
    self.reviewDescriptionLabel.textColor = [UIColor blackColor];
    self.reviewDescriptionLabel.backgroundColor  = [UIColor clearColor];
    self.reviewDescriptionLabel.textAlignment=UITextAlignmentLeft;
    self.reviewDescriptionLabel.text= [NSString stringWithFormat:@"Review by User"];
    
    self.submitButton.frame = CGRectMake(90, 230, 210, 35);
}

- (void)addThumbImage:(NSString *)imageName imageRect:(CGRect)rect
{
        
    UIButton *addReviewTitleImageButton = [[UIButton alloc]initWithFrame:rect];
    [addReviewTitleImageButton.layer setCornerRadius:5.0];
    [addReviewTitleImageButton setUserInteractionEnabled:NO];
    [addReviewTitleImageButton setBackgroundImage:[UIImage imageNamed:imageName] forState:UIControlStateNormal];
    addReviewTitleImageButton.layer.masksToBounds = YES;
    [self.scrollView addSubview:addReviewTitleImageButton];
    REMOVE_FROM_MEMORY(addReviewTitleImageButton); 
    
    //set border of the image 
    CGRect borderRect = rect;
    borderRect.origin.x = borderRect.origin.x - 2;
    borderRect.origin.y = borderRect.origin.y - 2;
    borderRect.size.width = borderRect.size.width + 4;
    borderRect.size.height = borderRect.size.height + 4;
    
    UIButton *borderButton = [[UIButton alloc]initWithFrame:borderRect];
    borderButton.userInteractionEnabled = NO;
    [borderButton.layer setBorderWidth:1.0];
    [borderButton.layer setCornerRadius:10.0];
    [borderButton.layer setBorderColor:[[UIColor colorWithWhite:0.3 alpha:0.5] CGColor]];
    [self.scrollView addSubview:borderButton];
    REMOVE_FROM_MEMORY(borderButton);
}

- (void)addReviewDescriptionImage
{
    UIButton *addDescriptionImageButton = [[UIButton alloc]initWithFrame:CGRectMake(15, 100, 62, 62)];
   // [addDescriptionImageButton.layer setCornerRadius:5.0];
    [addDescriptionImageButton setUserInteractionEnabled:NO];
    [addDescriptionImageButton setBackgroundImage:[UIImage imageNamed:@"dish1.jpg"] forState:UIControlStateNormal];
    //addDescriptionImageButton.layer.masksToBounds = YES;
    [self.scrollView addSubview:addDescriptionImageButton];
    REMOVE_FROM_MEMORY(addDescriptionImageButton); 
    
    //set border of the image 
    UIButton *borderButton = [[UIButton alloc]initWithFrame:CGRectMake(13, 98, 66, 66)];
    borderButton.userInteractionEnabled = NO;
    [borderButton.layer setBorderWidth:1.0];
    [borderButton.layer setCornerRadius:10.0];
    [borderButton.layer setBorderColor:[[UIColor colorWithWhite:0.3 alpha:0.5] CGColor]];
    [self.scrollView addSubview:borderButton];
    REMOVE_FROM_MEMORY(borderButton);
}

- (void)addReviewTitleTextView
{
    CGRect rect = CGRectMake(90,10,210,62);
    
    self.reviewTitleTextView = [[[TDMPlaceHolderTextView alloc] init] autorelease];
    [self.reviewTitleTextView setFrame:rect];
    self.reviewTitleTextView.tag  = 1;
    self.reviewTitleTextView.delegate = self;
    [self.reviewTitleTextView.layer setCornerRadius:7.0];
    self.reviewTitleTextView.placeHolder = @"Enter Dish Name Here";
    [self.scrollView addSubview:self.reviewTitleTextView];
    [reviewTitleTextView release];
}


- (void)addReviewDecriptionTextView
{
    CGRect rect = CGRectMake(90,122,210,100);
    
    self.reviewDescriptionTextView = [[[TDMPlaceHolderTextView alloc] init] autorelease];
    [self.reviewDescriptionTextView setFrame:rect];
    self.reviewDescriptionTextView.tag = 2;
    self.reviewDescriptionTextView.delegate = self;
    [self.reviewDescriptionTextView.layer setCornerRadius:7.0];
    self.reviewDescriptionTextView.placeHolder = @"Enter Dish Description Here";
    [self.scrollView addSubview:self.reviewDescriptionTextView];
    [reviewDescriptionTextView release];
}

-(void)startNotifications {
    
    // register for keyboard notifications
	[[NSNotificationCenter defaultCenter] addObserver:self 
											 selector:@selector(keyboardWillShow:) 
												 name:UIKeyboardWillShowNotification 
											   object:self.view.window];
	// register for keyboard notifications
	[[NSNotificationCenter defaultCenter] addObserver:self 
											 selector:@selector(keyboardWillHide:) 
												 name:UIKeyboardWillHideNotification 
											   object:self.view.window];
}


- (void)viewDidUnload
{

    [self setBackgroungImageView:nil];
    [self setTitleViewImage:nil];
    [self setViewTitleImageTitle:nil];
    [self setScrollView:nil];
    
    self.reviewTitleTextView = nil;
    self.reviewDescriptionTextView = nil;
    [self setSubmitButton:nil];
    [self setReviewDescriptionLabel:nil];
    [self setAdButton:nil];
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    // Return YES for supported orientations
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

#pragma mark View Creations
- (void)customiseCurrentView {
    
       // [scrollView setContentSize:CGSizeMake(0, 600)];
}

#pragma mark - scrolling handling

- (void)keyboardWillHide:(NSNotification *)obj_notification{
	if(bcontentflag)
	{
		icontentsize    = 460;
		self.scrollView.contentSize= CGSizeMake(0, icontentsize);
		bcontentflag    = NO;
	}
	[self RestoreScrollview];
}

- (void)keyboardWillShow:(NSNotification *)obj_notification{
	[self adjustScrollView];
}


-(void)RestoreScrollview{
    CGPoint pt;
    pt.x = 0 ;
    pt.y = 0 ;
    [self.scrollView setContentOffset:pt animated:YES];
}

-(void)adjustScrollView{		
	if(!bcontentflag)
	{
		icontentsize=270;
		self.scrollView.contentSize= CGSizeMake(0, icontentsize);
		bcontentflag=YES;
	}
	
}

-(void)startAnimateScrollview:(int)iVal{
    CGRect rc   = [self.scrollView bounds];
    rc          = [self.scrollView convertRect:rc toView:self.view];
    CGPoint pt  = rc.origin ;
    pt.x        = 0 ;
    pt.y -= iVal*(-1) ;
    [self.scrollView setContentOffset:pt animated:YES];
}


#pragma mark TextView Delegate
- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text{
    if ([text isEqualToString:@"\n"]) {
        [textView resignFirstResponder];
    }
    return YES;
}

- (BOOL)textViewShouldBeginEditing:(UITextView *)textView
{
    [self adjustScrollView];
	float fval;
	
	if(textView.tag == 2 ) {
		CGRect m_objtextrect=[self.view frame];		
		fval=m_objtextrect.origin.y;
		m_objtextrect=[textView frame];
		fval=fval+m_objtextrect.origin.y;
		if(fval > 55){
            [self startAnimateScrollview:(int)((fval-120))];//120 value is the scrollable Y Position
            
		}
	}
    
    return YES;
}

#pragma mark - Validation Methods Add Review

- (BOOL)isNonEmptyString:(NSString*)string {
    BOOL isValid = NO;
    string = [string stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
    if ([string length]>0) {
        isValid = YES;
    }
    return isValid;    
}

- (BOOL)isValReviewTitle {
    BOOL isValid =  NO;
    if ([self isNonEmptyString:self.reviewTitleTextView.text]) {
        isValid = YES;
    }
    return isValid;
}

- (BOOL)isValidReviewDescription {
    BOOL isValid = NO;
    if ([self isNonEmptyString:self.reviewDescriptionTextView.text]) {
        isValid = YES;
    }
    return isValid;
}
//returns TRUE if all fields are valid else FALSE
- (BOOL)isValidAddReviewDatas {

#define AS_ADD_REVIEW_WITH_NO_TITLE_DATA @"Review title is empty"
#define AS_ADD_REVIEW_WITH_NO_DESCRIPTION_DATA @"Review description is empty"
    
    BOOL isValid = YES;
    NSString * alertMessage;
    do {
        if (![self isNonEmptyString:self.reviewTitleTextView.text]) {
            alertMessage = AS_ADD_REVIEW_WITH_NO_TITLE_DATA;
            isValid = NO;
            break;
        }
        
        if (![self isNonEmptyString:self.reviewDescriptionTextView.text]) {
            alertMessage = AS_ADD_REVIEW_WITH_NO_DESCRIPTION_DATA;
            isValid = NO;
        }
        //add for more checking here
        //...
        //...
        
    } while (FALSE);
    
    if (!isValid) {
        
        kSHOW_ALERT_WITH_MESSAGE(TDM_TITLE, alertMessage);
        
    }
    return isValid;    
}



#pragma mark - Button Actions
- (IBAction)submitButtonClicked:(id)sender {
       
    TDMSuccessPageViewController *successPageViewController = (TDMSuccessPageViewController *)[self getClass:kSUCCESSPAGE_CLASS];
    [self.navigationController pushViewController:successPageViewController animated:YES];
}

- (IBAction)submitReviewButtonClicked:(id)sender {
    

     if ([self isValidAddReviewDatas]) 
     {
         NSLog(@"Call API 4 Add Review");
         
         TDMReviewConfirmationViewController *confirmReviewController = (TDMReviewConfirmationViewController *)[self getClass:kADDREVIEW_CONFIRMATION_CLASS];
         [self.navigationController pushViewController:confirmReviewController animated:YES];
     }
}

- (IBAction)adButtonClicked:(id)sender {
}

#pragma mark Memory Management
- (void)dealloc {

    [backgroungImageView release];
    [titleViewImage release];
    [viewTitleImageTitle release];
    [scrollView release];
    
//    self.reviewTitleTextView = nil;
//    self.reviewDescriptionTextView = nil;
    
    [submitButton release];
    [reviewDescriptionLabel release];
    [adButton release];
    [super dealloc];
}
@end
