import sys

class Config:
    
    def objective_c_config(self):
        self.model_path         =	'/Users/dx079/workspace/karmaloop-plndrapp-ios/Utility/xl-amg/model.json'
        self.output_path        =	'/Users/dx079/workspace/karmaloop-plndrapp-ios/Models/AutogeneratedModels/'
        self.template_directory =	'/Users/dx079/workspace/karmaloop-plndrapp-ios/Utility/xl-amg'
        self.template_names     =	'/template_objc_header', '/template_objc_message'
        
        self.file_extensions	=	'{}Object.h', '{}Object.m'
        self.types				=	{'dict' 	: 'NSDictionary',
            'dictionary': 'NSDictionary',
            'number'	: 'NSNumber',
            'float' 	: 'NSNumber',
            'int' 		: 'NSNumber',
            'string' 	: 'NSString',
    }
    
    def objective_c_name_formatting(self, properties):        
        for property in properties:
            if 'name' not in property:
                property['name'] = property['key'].title().replace('_','')
                property['name'] = property['name'].replace( property['name'][0],property['name'][0].lower(),1)
    
    def objective_c_type_processing(self, properties):
        for property in properties:
            if property['type'].endswith('[]'):
                property['type'] = property['type'].strip('[]')
                property['object_type'] = 'NSArray'
            elif property['type'] in self.types:
                property['object_type'] = self.types[property['type']]
            else:
                property['object_type'] = property['type']
    
    def java_config(self):
        
        self.templates          = 	['Templates/template_java']
        self.file_extensions	=	['{}.java']
        self.types              =	{'dict' 	: 'HashMap',
            'dictionary': 'HashMap',
            'float' 	: 'float',
            'int' 		: 'int',
            'number'    : 'double',
            'string'	: 'String',
            'float[]'   : 'float[]',
            'string[]'  : 'List<String>',
            'int[]'     : 'int[]',
        }
    
    def java_name_formatting(self, properties):
        self.objective_c_name_formatting(properties)
    
    def java_type_processing(self, properties):
        for property in properties:
            if property['type'].endswith('[]'):
                property['isArray'] = 1
                property['type'] = property['type'].strip('[]')
            if property['type'] in self.types:
                property['object_type'] = self.types[property['type']]
            else:
                property['object_type'] = property['type']
    
    def type_processing(self, properties):
        processing = { 'ObjectiveC' : self.objective_c_type_processing,
            'Java'       : self.java_type_processing
        }
        processing[self.language](properties)
    
    def name_formatting(self,properties):
        formatting = { 'ObjectiveC' : self.objective_c_name_formatting,
            'Java'       : self.java_name_formatting
            }
        formatting[self.language](properties)
    
    def __init__(self, language='ObjectiveC'):
        self.path                   = sys.path[0] + '/'
        
        self.destination            = self.path + 'Models/'
        self.language               = language
        
        #Required keys in model dictionary
        self.model_keys             = {'model_variables' : 'properties',
            'model_name' : 'name',
            'model_version_number' : 'version',
            'model_parent' : 'parent'
            }
        
        #Required keys in properties dictionary
        self.variable_keys          = {'variable_name' : 'name',
            'variable_type' : 'type',
            'variable_api_key' : 'key'
                }        
        
        if language == 'ObjectiveC':
            self.objective_c_config()
        elif language == 'Java':
            self.java_config()